rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isValidGameType(type) {
      return type in ['connect4', 'longboi', 'tactictoes', 'snek', 'colourclash', 'reversi'];
    }

    function isValidGamePlayers(players) {
      return players is list && players.size() > 0;
    }

    function isValidSetup(setup) {
      return setup.keys().hasAll(['gameType', 'gamePlayers', 'boardWidth', 'boardHeight', 'playersReady', 'maxTurnTime', 'startRequested', 'started', 'timeCreated']) &&
             isValidGameType(setup.gameType) &&
             isValidGamePlayers(setup.gamePlayers) &&
             setup.boardWidth is int &&
             setup.boardWidth >= 5 &&
             setup.boardHeight is int &&
             setup.boardHeight >= 5 &&
             setup.playersReady is list &&
             setup.maxTurnTime is int &&
             setup.maxTurnTime > 0 &&
             setup.startRequested is bool &&
             setup.started is bool &&
             setup.timeCreated is timestamp;
    }

    function isValidPrivateMove(move) {
      return move.keys().hasAll(['gameID', 'moveNumber', 'playerID', 'move', 'timestamp']) &&
             move.gameID is string &&
             move.moveNumber is int &&
             move.moveNumber >= 0 &&
             move.playerID is string &&
             move.move is int &&
             move.move >= 0 &&
             move.timestamp is timestamp;
    }

    function isValidMoveStatusUpdate(current, next) {
      let addedIds = next.movedPlayerIDs.removeAll(current.movedPlayerIDs);
      return current.moveNumber == next.moveNumber &&
             current.alivePlayerIDs == next.alivePlayerIDs &&
             addedIds.size() == 1 &&
             addedIds[0] == request.auth.uid;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Sessions Collection
    match /sessions/{sessionId} {
      allow read: if true;
      allow create: if isAuthenticated();

      // Setups Subcollection
      match /setups/{setupId} {
        allow read: if true;
        allow create, update: if isAuthenticated() && isValidSetup(request.resource.data);
      }

      // Games Subcollection
      match /games/{gameId} {
        allow read: if true;

        // MoveStatuses Subcollection
        match /moveStatuses/{moveStatusId} {
          allow read: if true;
          allow update: if isAuthenticated() && isValidMoveStatusUpdate(resource.data, request.resource.data);
        }

        // PrivateMoves Subcollection
        match /privateMoves/{moveId} {
          allow create: if isAuthenticated() &&
                           request.auth.uid == request.resource.data.playerID &&
                           isValidPrivateMove(request.resource.data);
        }

        // ExpirationRequests Subcollection
        match /expirationRequests/{requestId} {
          allow read: if true;
          allow create: if isAuthenticated();
        }
      }
    }

    // Bots Collection
    match /bots/{botId} {
      allow read: if true;
    }
  }
}