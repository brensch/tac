// firestore.rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the request comes from a Cloud Function
    function isRequestFromCloudFunction() {
      return request.auth.token.firebase != null && 
             request.auth.token.firebase.sign_in_provider == "firebase";
    }

    // Moves Collection
    match /games/{gameID}/privateMoves/{moveID} {
      allow create: if isRequestFromCloudFunction() || (
        request.auth.uid != null &&
        request.resource.data.playerID == request.auth.uid &&
        request.resource.data.timestamp == request.time &&
        request.resource.data.moveNumber is int &&
        request.resource.data.move is int &&
        request.resource.data.gameID == gameID
      );
      allow update, delete: if false;
      allow read: if request.auth.uid == resource.data.playerID;
    }

    // Turns Collection
    match /games/{gameID}/turns/{turnNumber} {
      allow write: if isRequestFromCloudFunction();
      allow read: if true;
    }

    // Expiration Requests Subcollection within Turns
    match /games/{gameID}/turns/{turnNumber}/expirationRequests/{expirationID} {
      allow read, write: if true;
    }

    // Ready Expiration Requests Collection
    match /games/{gameID}/readyExpirationRequests/{expirationID} {
      allow read, write: if true;
    }
    
    // Game Document
    match /games/{gameID} {
      allow read: if true;

      // Create Game Document
      allow create: if isRequestFromCloudFunction() || (
        request.auth.uid != null &&
        request.resource.data.playerIDs.size() == 0 &&
        request.resource.data.playersReady.size() == 0 &&
        request.resource.data.started == false &&
        request.resource.data.maxTurnTime > 0 &&
        request.resource.data.boardWidth >= 5 &&
        request.resource.data.sessionName is string && // Ensure sessionName is a string
        request.resource.data.sessionIndex == 0 &&
        request.resource.data.winner.size() == 0 && // winner is now an empty array
        request.resource.data.nextGame == "" &&
        request.resource.data.board is list && // Ensure board is a list
        request.resource.data.board.size() == request.resource.data.boardWidth * request.resource.data.boardWidth // Validate board size
      );

      // Update Game Document
      allow update: if isRequestFromCloudFunction() || (
        request.auth.uid != null &&
        (
          // Allow adding own playerID before game starts
          (
            !resource.data.started &&
            request.resource.data.playerIDs.size() == resource.data.playerIDs.size() + 1 && // Size increased by 1
            request.resource.data.playerIDs.hasAll(resource.data.playerIDs) && // Contains all existing playerIDs
            request.resource.data.playerIDs.hasAny([request.auth.uid]) && // Contains the current user
            !resource.data.playerIDs.hasAny([request.auth.uid]) // Current user was not already a player
          )
          ||
          // Allow updating 'maxTurnTime' and 'boardWidth' before game starts
          (
            !resource.data.started &&
            request.resource.data.maxTurnTime > 0 &&
            request.resource.data.boardWidth >= 5 &&
            request.resource.data.playerIDs == resource.data.playerIDs &&
            request.resource.data.sessionName == resource.data.sessionName &&
            request.resource.data.sessionIndex == resource.data.sessionIndex &&
            request.resource.data.winner.size() == resource.data.winner.size() && // Winner array size unchanged
            request.resource.data.winner == resource.data.winner && // Winner array content unchanged
            request.resource.data.started == resource.data.started &&
            request.resource.data.nextGame == resource.data.nextGame &&
            request.resource.data.board is list &&
            request.resource.data.board.size() == request.resource.data.boardWidth * request.resource.data.boardWidth // Validate board size
          )
          ||
          // Allow updating the playersReady list with own UID
          (
            !resource.data.started &&
            request.resource.data.playersReady.size() == resource.data.playersReady.size() + 1 && // Size increased by 1
            request.resource.data.playersReady.hasAll(resource.data.playersReady) && // Contains all existing playersReady
            request.resource.data.playersReady.hasAny([request.auth.uid]) && // Contains the current user
            !request.data.playersReady.hasAny([request.auth.uid]) // Current user was not already ready
          )
          ||
          // Allow changing gameType to valid enum value ('connect4' or 'longboi')
          (
            !resource.data.started &&
            request.resource.data.gameType in ['connect4', 'longboi'] &&
            request.resource.data.playerIDs == resource.data.playerIDs &&
            request.resource.data.sessionName == resource.data.sessionName &&
            request.resource.data.sessionIndex == resource.data.sessionIndex &&
            request.resource.data.winner.size() == resource.data.winner.size() &&
            request.resource.data.winner == resource.data.winner &&
            request.resource.data.started == resource.data.started &&
            request.resource.data.nextGame == resource.data.nextGame
          )
        )
      ) &&
      (
        // Ensure 'winner' array is either unchanged or empty
        (request.resource.data.winner == resource.data.winner)
      ) &&
      (
        // Ensure 'board' array remains valid
        (request.resource.data.board is list &&
         request.resource.data.board.size() == request.resource.data.boardWidth * request.resource.data.boardWidth)
      );
    }

    // Users Collection
    match /users/{userID} {
      allow write: if request.auth.uid == userID || isRequestFromCloudFunction();
      allow read: if true;
    }

    // Turn Expiration Requests Subcollection
    match /games/{gameID}/turnExpirationRequests/{requestID} {
      allow create: if request.auth != null;
      allow read: if true;
    }
  }

  // Helper function to check if the request comes from a Cloud Function
  function isRequestFromCloudFunction() {
    return request.auth.token.firebase != null && request.auth.token.firebase.sign_in_provider == "firebase";
  }
}
